FROM golang:1.24-alpine AS builder

WORKDIR /app

# Copy go module files first for better layer caching
COPY go.mod go.sum ./
RUN go mod download && go mod tidy

# Copy the source code
COPY . .

# Build the server application
RUN CGO_ENABLED=0 GOOS=linux go build -o upgrade-server ./cmd/upgrade-server

# Use a minimal alpine image for the final container
FROM alpine:3.19

# Add labels for better container management
LABEL maintainer="Your Name <your.email@example.com>"
LABEL version="1.0.0"
LABEL description="gRPC server for SonicUpgradeService"

# Install required packages (including procps for procfs access tools and util-linux for nsenter)
RUN apk --no-cache add ca-certificates procps util-linux

WORKDIR /app

# Copy the binary from the builder stage
COPY --from=builder /app/upgrade-server .

# Create directories for mounting host volumes if needed
RUN mkdir -p /etc/sonic /host/etc/sonic

# Don't use a non-root user since we need privileges for reboot
# USER appuser is removed to allow root actions

# Set environment variables to ensure proper logging
ENV GO_LOG=stderr

# Command to run the executable
ENTRYPOINT ["/app/upgrade-server"]

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: proto/sonic_upgrade.proto

package gnoi_sonic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SonicUpgradeService_UpdateFirmware_FullMethodName = "/gnoi.sonic.SonicUpgradeService/UpdateFirmware"
)

// SonicUpgradeServiceClient is the client API for SonicUpgradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SonicUpgradeService provides firmware update functionality.
type SonicUpgradeServiceClient interface {
	// Starts a firmware update and streams status/log lines back to the client.
	UpdateFirmware(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateFirmwareRequest, UpdateFirmwareStatus], error)
}

type sonicUpgradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSonicUpgradeServiceClient(cc grpc.ClientConnInterface) SonicUpgradeServiceClient {
	return &sonicUpgradeServiceClient{cc}
}

func (c *sonicUpgradeServiceClient) UpdateFirmware(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateFirmwareRequest, UpdateFirmwareStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SonicUpgradeService_ServiceDesc.Streams[0], SonicUpgradeService_UpdateFirmware_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateFirmwareRequest, UpdateFirmwareStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SonicUpgradeService_UpdateFirmwareClient = grpc.BidiStreamingClient[UpdateFirmwareRequest, UpdateFirmwareStatus]

// SonicUpgradeServiceServer is the server API for SonicUpgradeService service.
// All implementations must embed UnimplementedSonicUpgradeServiceServer
// for forward compatibility.
//
// SonicUpgradeService provides firmware update functionality.
type SonicUpgradeServiceServer interface {
	// Starts a firmware update and streams status/log lines back to the client.
	UpdateFirmware(grpc.BidiStreamingServer[UpdateFirmwareRequest, UpdateFirmwareStatus]) error
	mustEmbedUnimplementedSonicUpgradeServiceServer()
}

// UnimplementedSonicUpgradeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSonicUpgradeServiceServer struct{}

func (UnimplementedSonicUpgradeServiceServer) UpdateFirmware(grpc.BidiStreamingServer[UpdateFirmwareRequest, UpdateFirmwareStatus]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateFirmware not implemented")
}
func (UnimplementedSonicUpgradeServiceServer) mustEmbedUnimplementedSonicUpgradeServiceServer() {}
func (UnimplementedSonicUpgradeServiceServer) testEmbeddedByValue()                             {}

// UnsafeSonicUpgradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SonicUpgradeServiceServer will
// result in compilation errors.
type UnsafeSonicUpgradeServiceServer interface {
	mustEmbedUnimplementedSonicUpgradeServiceServer()
}

func RegisterSonicUpgradeServiceServer(s grpc.ServiceRegistrar, srv SonicUpgradeServiceServer) {
	// If the following call pancis, it indicates UnimplementedSonicUpgradeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SonicUpgradeService_ServiceDesc, srv)
}

func _SonicUpgradeService_UpdateFirmware_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SonicUpgradeServiceServer).UpdateFirmware(&grpc.GenericServerStream[UpdateFirmwareRequest, UpdateFirmwareStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SonicUpgradeService_UpdateFirmwareServer = grpc.BidiStreamingServer[UpdateFirmwareRequest, UpdateFirmwareStatus]

// SonicUpgradeService_ServiceDesc is the grpc.ServiceDesc for SonicUpgradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SonicUpgradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.sonic.SonicUpgradeService",
	HandlerType: (*SonicUpgradeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateFirmware",
			Handler:       _SonicUpgradeService_UpdateFirmware_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/sonic_upgrade.proto",
}

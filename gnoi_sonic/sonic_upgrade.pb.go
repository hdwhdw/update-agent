// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: proto/sonic_upgrade.proto

package gnoi_sonic

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State of the update process.
type UpdateFirmwareStatus_State int32

const (
	UpdateFirmwareStatus_STARTED   UpdateFirmwareStatus_State = 0 // RPC opened
	UpdateFirmwareStatus_RUNNING   UpdateFirmwareStatus_State = 1 // intermediate logs
	UpdateFirmwareStatus_SUCCEEDED UpdateFirmwareStatus_State = 2 // exit code 0
	UpdateFirmwareStatus_FAILED    UpdateFirmwareStatus_State = 3 // exit code ≠ 0
)

// Enum value maps for UpdateFirmwareStatus_State.
var (
	UpdateFirmwareStatus_State_name = map[int32]string{
		0: "STARTED",
		1: "RUNNING",
		2: "SUCCEEDED",
		3: "FAILED",
	}
	UpdateFirmwareStatus_State_value = map[string]int32{
		"STARTED":   0,
		"RUNNING":   1,
		"SUCCEEDED": 2,
		"FAILED":    3,
	}
)

func (x UpdateFirmwareStatus_State) Enum() *UpdateFirmwareStatus_State {
	p := new(UpdateFirmwareStatus_State)
	*p = x
	return p
}

func (x UpdateFirmwareStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateFirmwareStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_sonic_upgrade_proto_enumTypes[0].Descriptor()
}

func (UpdateFirmwareStatus_State) Type() protoreflect.EnumType {
	return &file_proto_sonic_upgrade_proto_enumTypes[0]
}

func (x UpdateFirmwareStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateFirmwareStatus_State.Descriptor instead.
func (UpdateFirmwareStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_proto_sonic_upgrade_proto_rawDescGZIP(), []int{2, 0}
}

// Request message to start a firmware update.
type UpdateFirmwareRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*UpdateFirmwareRequest_FirmwareUpdate
	Request       isUpdateFirmwareRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFirmwareRequest) Reset() {
	*x = UpdateFirmwareRequest{}
	mi := &file_proto_sonic_upgrade_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFirmwareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirmwareRequest) ProtoMessage() {}

func (x *UpdateFirmwareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sonic_upgrade_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirmwareRequest.ProtoReflect.Descriptor instead.
func (*UpdateFirmwareRequest) Descriptor() ([]byte, []int) {
	return file_proto_sonic_upgrade_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateFirmwareRequest) GetRequest() isUpdateFirmwareRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *UpdateFirmwareRequest) GetFirmwareUpdate() *FirmwareUpdateParams {
	if x != nil {
		if x, ok := x.Request.(*UpdateFirmwareRequest_FirmwareUpdate); ok {
			return x.FirmwareUpdate
		}
	}
	return nil
}

type isUpdateFirmwareRequest_Request interface {
	isUpdateFirmwareRequest_Request()
}

type UpdateFirmwareRequest_FirmwareUpdate struct {
	// The initial firmware update request (current type)
	FirmwareUpdate *FirmwareUpdateParams `protobuf:"bytes,1,opt,name=firmware_update,json=firmwareUpdate,proto3,oneof"` // Future request types can be added here
}

func (*UpdateFirmwareRequest_FirmwareUpdate) isUpdateFirmwareRequest_Request() {}

// Parameters for firmware update (current implementation)
type FirmwareUpdateParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path (inside the server container) or URL to the firmware .bin
	FirmwareSource string `protobuf:"bytes,1,opt,name=firmware_source,json=firmwareSource,proto3" json:"firmware_source,omitempty"`
	// If true, pass UPDATE_MLNX_CPLD_FW="1" to the script (cold-boot vs. warm-reboot).
	UpdateMlnxCpldFw bool `protobuf:"varint,2,opt,name=update_mlnx_cpld_fw,json=updateMlnxCpldFw,proto3" json:"update_mlnx_cpld_fw,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FirmwareUpdateParams) Reset() {
	*x = FirmwareUpdateParams{}
	mi := &file_proto_sonic_upgrade_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirmwareUpdateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareUpdateParams) ProtoMessage() {}

func (x *FirmwareUpdateParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sonic_upgrade_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareUpdateParams.ProtoReflect.Descriptor instead.
func (*FirmwareUpdateParams) Descriptor() ([]byte, []int) {
	return file_proto_sonic_upgrade_proto_rawDescGZIP(), []int{1}
}

func (x *FirmwareUpdateParams) GetFirmwareSource() string {
	if x != nil {
		return x.FirmwareSource
	}
	return ""
}

func (x *FirmwareUpdateParams) GetUpdateMlnxCpldFw() bool {
	if x != nil {
		return x.UpdateMlnxCpldFw
	}
	return false
}

// Status message for firmware update progress.
type UpdateFirmwareStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A human-readable line of output from the script.
	LogLine string                     `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	State   UpdateFirmwareStatus_State `protobuf:"varint,2,opt,name=state,proto3,enum=gnoi.sonic.UpdateFirmwareStatus_State" json:"state,omitempty"`
	// If FAILED, propagate one of the script’s exit codes (126–140).
	ExitCode      int32 `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFirmwareStatus) Reset() {
	*x = UpdateFirmwareStatus{}
	mi := &file_proto_sonic_upgrade_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFirmwareStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirmwareStatus) ProtoMessage() {}

func (x *UpdateFirmwareStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sonic_upgrade_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirmwareStatus.ProtoReflect.Descriptor instead.
func (*UpdateFirmwareStatus) Descriptor() ([]byte, []int) {
	return file_proto_sonic_upgrade_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateFirmwareStatus) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *UpdateFirmwareStatus) GetState() UpdateFirmwareStatus_State {
	if x != nil {
		return x.State
	}
	return UpdateFirmwareStatus_STARTED
}

func (x *UpdateFirmwareStatus) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

var File_proto_sonic_upgrade_proto protoreflect.FileDescriptor

const file_proto_sonic_upgrade_proto_rawDesc = "" +
	"\n" +
	"\x19proto/sonic_upgrade.proto\x12\n" +
	"gnoi.sonic\"o\n" +
	"\x15UpdateFirmwareRequest\x12K\n" +
	"\x0ffirmware_update\x18\x01 \x01(\v2 .gnoi.sonic.FirmwareUpdateParamsH\x00R\x0efirmwareUpdateB\t\n" +
	"\arequest\"n\n" +
	"\x14FirmwareUpdateParams\x12'\n" +
	"\x0ffirmware_source\x18\x01 \x01(\tR\x0efirmwareSource\x12-\n" +
	"\x13update_mlnx_cpld_fw\x18\x02 \x01(\bR\x10updateMlnxCpldFw\"\xca\x01\n" +
	"\x14UpdateFirmwareStatus\x12\x19\n" +
	"\blog_line\x18\x01 \x01(\tR\alogLine\x12<\n" +
	"\x05state\x18\x02 \x01(\x0e2&.gnoi.sonic.UpdateFirmwareStatus.StateR\x05state\x12\x1b\n" +
	"\texit_code\x18\x03 \x01(\x05R\bexitCode\"<\n" +
	"\x05State\x12\v\n" +
	"\aSTARTED\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\r\n" +
	"\tSUCCEEDED\x10\x02\x12\n" +
	"\n" +
	"\x06FAILED\x10\x032r\n" +
	"\x13SonicUpgradeService\x12[\n" +
	"\x0eUpdateFirmware\x12!.gnoi.sonic.UpdateFirmwareRequest\x1a .gnoi.sonic.UpdateFirmwareStatus\"\x00(\x010\x01B\x0fZ\r./;gnoi_sonicb\x06proto3"

var (
	file_proto_sonic_upgrade_proto_rawDescOnce sync.Once
	file_proto_sonic_upgrade_proto_rawDescData []byte
)

func file_proto_sonic_upgrade_proto_rawDescGZIP() []byte {
	file_proto_sonic_upgrade_proto_rawDescOnce.Do(func() {
		file_proto_sonic_upgrade_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_sonic_upgrade_proto_rawDesc), len(file_proto_sonic_upgrade_proto_rawDesc)))
	})
	return file_proto_sonic_upgrade_proto_rawDescData
}

var file_proto_sonic_upgrade_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_sonic_upgrade_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_sonic_upgrade_proto_goTypes = []any{
	(UpdateFirmwareStatus_State)(0), // 0: gnoi.sonic.UpdateFirmwareStatus.State
	(*UpdateFirmwareRequest)(nil),   // 1: gnoi.sonic.UpdateFirmwareRequest
	(*FirmwareUpdateParams)(nil),    // 2: gnoi.sonic.FirmwareUpdateParams
	(*UpdateFirmwareStatus)(nil),    // 3: gnoi.sonic.UpdateFirmwareStatus
}
var file_proto_sonic_upgrade_proto_depIdxs = []int32{
	2, // 0: gnoi.sonic.UpdateFirmwareRequest.firmware_update:type_name -> gnoi.sonic.FirmwareUpdateParams
	0, // 1: gnoi.sonic.UpdateFirmwareStatus.state:type_name -> gnoi.sonic.UpdateFirmwareStatus.State
	1, // 2: gnoi.sonic.SonicUpgradeService.UpdateFirmware:input_type -> gnoi.sonic.UpdateFirmwareRequest
	3, // 3: gnoi.sonic.SonicUpgradeService.UpdateFirmware:output_type -> gnoi.sonic.UpdateFirmwareStatus
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_sonic_upgrade_proto_init() }
func file_proto_sonic_upgrade_proto_init() {
	if File_proto_sonic_upgrade_proto != nil {
		return
	}
	file_proto_sonic_upgrade_proto_msgTypes[0].OneofWrappers = []any{
		(*UpdateFirmwareRequest_FirmwareUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_sonic_upgrade_proto_rawDesc), len(file_proto_sonic_upgrade_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_sonic_upgrade_proto_goTypes,
		DependencyIndexes: file_proto_sonic_upgrade_proto_depIdxs,
		EnumInfos:         file_proto_sonic_upgrade_proto_enumTypes,
		MessageInfos:      file_proto_sonic_upgrade_proto_msgTypes,
	}.Build()
	File_proto_sonic_upgrade_proto = out.File
	file_proto_sonic_upgrade_proto_goTypes = nil
	file_proto_sonic_upgrade_proto_depIdxs = nil
}
